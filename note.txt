*单页应用的问题：
1.seo不友好
2.首屏时间较长，用户体验差

解决方案：服务器端渲染

render方法传入的第一参数是一个元素对象
import 组件得到普通js对象,class或者function（类）
<component />这样是元素对象，元素对象当然也是js对象（类的实例）

*前端技术选型

1.单页
2.多页

多页应用其实最主要的就是进行一些dom操作  工程化工具：grunt、gulp 但是这两个工具命令注册功能都可以被npm script替代掉了
多页应用模块化seajs,requirejs  静态资源使用gulp,grunt编译到html中，自由度低，操作复杂

多页所有内容都在前端js生产，js承担更多业务逻辑，后端只提供API，页面路由跳转在前端控制,静态文件处理只需在js文件中引用
并且交由模块化工具转化为线上可用的静态资源，并且可以定制化转化过程适应不同的需求场景

其他技术选型考虑因素：
1.浏览器兼容  2.toB还是toC  3.移动端还是pc端

工程架构最重要的一点是：定制  因为每一个项目都会有它特有的需求

*工程架构和项目架构

工程架构更多考虑的是让项目良好的运行,更方便开发，自动化
项目架构更多考虑的是业务处理，功能开发，扩展性   包括：技术选型,数据解决方案,代码风格

*web常用网络优化
1.合并资源文件，减少HTTP请求
2.压缩资源文件
3.利用缓存机制，尽可能使用缓存减少请求  现在最流行的缓存机制，是根据文件内容计算得到一个hash值拼接到文件名上，如果文件内容不变hash值也不会变

webpack中publicPath在引用资源文件路径时会用到，publicPath会加在文件名前面作为引用路径

*webpack配置
babel-loader只是插件，还需安装babel-core才能让babel-loader生效

如果js或jsx文件中有jsx代码，那就必须 import React from 'react'  因为jsx中每一个html标签，都调用了React.CreateElement()转化为js对象

*Babel 6 的 loose mode
 loose mode 在babel中通常是不推荐使用的，但是我们需要知道的是使用 loose mode 转换而来的代码更加像ES5的代码（更像是人手写的）
大多数Babel插件都有两种模式 normal mode 和 loose mode

*搭建webpack工程流程：

1.配置entry
2.配置output
3.配置module rules
4.配置babel-loader

优化：
1.vendor
2.common chunk
3.split
4.tree shaking
5.uglify
6.cache
7.指定异步chunk命名规则，便于缓存

redux与mobx:
redux每次执行action会返回新的state，所有页面从新渲染，但是react虚拟dom存在，所以效率依旧高;mobx则始终只有一份数据，每次更新只是修改
数据对象，然后更新依赖该数据的视图。从效率上讲，肯定mobx会更高
redux中有action，reducer这些概念第一是遵循flux的定义，第二是可以有办法清晰的记录程序执行的action及相应state改变 ,更好的debug。所以
redux有一套严格的模式，而mobx简单没有这么多概念

代码隔行：可以归为一类，或者处理同一件事的代码不隔行，*按处理步骤，不同步骤要隔*;function return要隔行;作用域顶部变量声明要;
			模块顶部import要;function定义上下留空行;语句的{}中基本上就不隔;fn{}中的代码不多可以少隔(变量声明后不隔)，尽量考虑不同步骤隔;在一个module最外层
			一个步骤的变量声明与后面的语句或函数调用不隔;在{}中没有分步骤，只有多个语句或复杂函数调用可以隔;
			module外层fn定义,fn执行,语句之间如果不是在处理同一问题，要隔

配置相关的变量声明和初始化比较重要的，含有全局性质的变量，习惯性放到顶部;如果obj...比较长考虑解构;		

封装function，提取不同的作为参数(可以与runtime得到的变量，或者是callback)，封装相同的逻辑处理以及与runtime无关的依赖引用(高耦合)

react16新特性
1.error boundary 提供了一个componentDidCatch钩子补货error，在钩子函数里可以处理，展示error信息
2.new render return types 以前只能是(<div></div>)，现在可以是[]或者string
3.portals 提供了一个将content插入指定节点的能力，通过ReactDOM.createPortal()方法。以前的render方法都是将return的content插入当前组件上下文
4.better server-side rendering 

other：
1.flex-grow可以让只有一个子元素时撑满整个父元素，或者在多个子元素得时候让某一个子元素把剩余width撑满
display:flex, align-item:center 让子元素垂直居中
2.customized theme 时， secondary 仍然取色默认500而不是官方文档上说得的以A开头，不知为何
3.tagName/+tab补全为单标签
4.文件命令全小写，组件命名首字母大写
/**/
5.要习惯把一个页面拆分为容器组件文件和多个UI组件文件。如果单个UI组件文件内部还需要声明更细化的UI组件，就在文件内部声明
如果页面复杂且存在耦合度低的情况，还可根据耦合度拆分，但是这种情况较少
像使用map循环的组件如果较为复杂，要拆分；逻辑复杂的组件要拆分；index.jsx文件除了管理状态，还可以做负责较为简单的UI渲染

	1.UI组件：只负责页面的渲染

	2.容器组件：只负责业务逻辑和数据的处理

	3.无状态组件(pure function)：把UI组件用函数表示（可以省去生命周期函数，优化代码）
/**/
6.原生标签可以直接添加onClick事件，元素标签需要自己定义onClick属性传给原生标签的onClick上
7.colgroup标签
8.注意热更新会重新渲染组件，触发组件的constuctor, 钩子 ,render方法
9.编码编写的时候要注重语义化变量声明，阅读起来让人能够清晰的知道代码一步步得到的是什么东西,并不是说代码越少越好
10.redux 一个函数中多个dispatch时，后面的dispatch会等到前面的dispatch reducer同步执行完后才触发.
11.函数命名用驼峰，变量命名两个单词用驼峰，超过两个用下划线;变量命名要详细明了，比如只命名为id是不对的，应该是xxxId
12.当作参数传入得数据如果比较复杂，先赋值给变量，再将变量传入
13.像obj.props 如果在同一作用域中出现多次，应该将obj.props赋给一个变量
14.请求api，查询数据使用get，上传数据使用post
15.router 当路由参数不确定的时候用parmas，确定就几个可选值的时候用query
16.props.history.replace在page A进行跳转后再点击浏览器返回键会跳转到进入A之前的page
17.编写逻辑复杂的function时，要习惯性的在顶部把要用到的数据赋给变量，然后在后面的js表达式或者jsx中 变量.api;
尽量少在表达式或者jsx中使用obj.property.api,不美观，且可读性差。
18.除了状态提升，还要考虑状态拆分，是否应该拆分到子组件，否则状态太多就糅杂到一起了
19.如果第三方的package和自己项目中有相同的dependencies但是大版本差的太多，导致会有一些问题，可以尝试自己实现第三方package
20.PM2，node server管理工具
21.hoc高阶组件:1.封装使用componet时候的交叉逻辑(组合、逻辑、state处理),参数化component 
2.增强componet传入需要props 3.修改componet声明周期。针对的是component,
并且***最重要的是hoc是创造一个新的component,render props只是参数化<children />。
hoc封装的是实现，render prop封装的是调用render prop的过程。hoc是复用性，render prop是低耦合
何时使用hoc:首先组件本就是react中最小的复用单元，具有复用性。封装hoc也得是在hoc有复用性需求时才去封装。
hoc的复用性和组件的复用性区别：组件的复用是功能单元的复用，hoc复用是组件特定使用方式，组合,逻辑处理场景过程的复用
22.render props是封装一个componet的children render的的交叉逻辑，参数化<children />, 针对的是children的render。不要和hoc混淆了




***************
该项目遗留问题：css in js热更新无效